
import com.consumerService.api.service.GoogleChatBotService;
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpRequestInitializer;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.gson.GsonFactory;
import com.google.api.client.util.store.FileDataStoreFactory;
import com.google.api.services.sheets.v4.Sheets;
import com.google.api.services.sheets.v4.SheetsScopes;
import com.google.api.services.sheets.v4.model.AppendValuesResponse;
import com.google.api.services.sheets.v4.model.ValueRange;
import com.google.auth.http.HttpCredentialsAdapter;
import com.google.auth.oauth2.GoogleCredentials;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.security.GeneralSecurityException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

@Service
public class SheetsQuickstart {

    @Autowired
    GoogleChatBotService googleChatBotService;
    @Value("${google.sheet.spreadsheet-id}")
    private String spreadsheetId;

    @Value("${google.sheet.range}")
    private String range;

    private static final String APPLICATION_NAME = "kafka-sheetintergation";
    private static final JsonFactory JSON_FACTORY = GsonFactory.getDefaultInstance();
    private static final String TOKENS_DIRECTORY_PATH = "tokens/path";

    /**
     * Global instance of the scopes required by this quickstart.
     * If modifying these scopes, delete your previously saved tokens/ folder.
     */
    private static final List<String> SCOPES =
            Collections.singletonList(SheetsScopes.SPREADSHEETS);
    private static final String CREDENTIALS_FILE_PATH = "/google-creds.json";

    /**
     * Creates an authorized Credential object.
     *
     * @param HTTP_TRANSPORT The network HTTP Transport.
     * @return An authorized Credential object.
     * @throws IOException If the credentials.json file cannot be found.
     */
    private static Credential getCredentials(final NetHttpTransport HTTP_TRANSPORT)
            throws IOException {
        // Load client secrets.
        InputStream in = SheetsQuickstart.class.getResourceAsStream(CREDENTIALS_FILE_PATH);
        if (in == null) {
            throw new FileNotFoundException("Resource not found: " + CREDENTIALS_FILE_PATH);
        }


        GoogleClientSecrets clientSecrets =
                GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));

        // Build flow and trigger user authorization request.
        GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
                HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, SCOPES)
                .setDataStoreFactory(new FileDataStoreFactory(new java.io.File(TOKENS_DIRECTORY_PATH)))
                .setAccessType("offline")
                .build();
        LocalServerReceiver receiver = new LocalServerReceiver.Builder().setPort(8888).build();
        return new AuthorizationCodeInstalledApp(flow, receiver).authorize("user");
    }



//    public static void main(String... args) throws IOException, GeneralSecurityException {
//        // Build a new authorized API client service.
//        final NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();
//        final String spreadsheetId = "1wWesyIyZv7wU-7bvP05nb6XGdk_wTqP6D0iJIJRT5UA";
//        final String range = "Template";
//        final NetHttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
//
//        InputStream in = SheetsQuickstart.class.getResourceAsStream(CREDENTIALS_FILE_PATH);
//        if (in == null) {
//            throw new FileNotFoundException("Resource not found: " + CREDENTIALS_FILE_PATH);
//        }
//
//        GoogleCredentials credentials = GoogleCredentials.fromStream(in)
//                .createScoped(Collections.singleton(SheetsScopes.SPREADSHEETS));
//
//
//        HttpRequestInitializer requestInitializer = new HttpCredentialsAdapter(
//                credentials);
//
//        // Create the sheets API client
//        Sheets service = new Sheets.Builder(new NetHttpTransport(),
//                GsonFactory.getDefaultInstance(),
//                requestInitializer)
//                .setApplicationName(APPLICATION_NAME)
//                .build();
//
//
//        List<List<Object>> values = new ArrayList<>();
//
//        // Add dummy data
//        List<Object> row1 = new ArrayList<>();
//        row1.add("abhishek studyiq");
//        row1.add("Male");  // Integer value
//        row1.add("senior"); // Double value
//        values.add(row1);
//
//        List<Object> row2 = new ArrayList<>();
//        row2.add(null);
//        row2.add("Female");
//        row2.add("Junior"); // Boolean value
//        values.add(row2);
//
//        try {
//            ValueRange body = new ValueRange()
//                    .setValues(values);
//            AppendValuesResponse result = null;
//            String valueInputOption = null;
//            ValueRange vr = new ValueRange().setValues(values).setMajorDimension("ROWS");
//            result = service.spreadsheets().values().append(spreadsheetId, range, vr)
//                    .setValueInputOption("RAW")
//                    .execute();
//            System.out.printf("%d cells updated.", result.getUpdates().getUpdatedCells());
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//    }


    public void updateRowsToGoogleSheet(List<List<Object>> values) {
        try {
            final NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();
            InputStream in = SheetsQuickstart.class.getResourceAsStream(CREDENTIALS_FILE_PATH);
            if (in == null) {
            throw new FileNotFoundException("Resource not found: " + CREDENTIALS_FILE_PATH);
        }
            GoogleCredentials credentials = GoogleCredentials.fromStream(in)
                    .createScoped(Collections.singleton(SheetsScopes.SPREADSHEETS));
            HttpRequestInitializer requestInitializer = new HttpCredentialsAdapter(
                    credentials);

            // Create the sheets API client
            Sheets service = new Sheets.Builder(new NetHttpTransport(),
                    GsonFactory.getDefaultInstance(),
                    requestInitializer)
                    .setApplicationName(APPLICATION_NAME)
                    .build();


            ValueRange vr = new ValueRange().setValues(values).setMajorDimension("ROWS");
            AppendValuesResponse result = service.spreadsheets().values().append(spreadsheetId, range, vr)
                    .setValueInputOption("RAW")
                    .execute();
            System.out.printf("%d cells updated.", result.getUpdates().getUpdatedCells());
        } catch (Exception e) {
            googleChatBotService.sendGoogleSpaceAlertMessage("Consumer-service",
                    "updateRowsToGoogleSheet", e.getMessage(), e);
            e.printStackTrace();
        }

    }


}
